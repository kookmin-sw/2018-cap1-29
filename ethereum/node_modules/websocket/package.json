{
  "_args": [
    [
      {
        "raw": "websocket@git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
        "scope": null,
        "escapedName": "websocket",
        "name": "websocket",
        "rawSpec": "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
        "spec": "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:frozeman/WebSocket-Node.git#browserifyCompatible",
          "sshUrl": "git+ssh://git@github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
          "httpsUrl": "git+https://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
          "gitUrl": "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
          "shortcut": "github:frozeman/WebSocket-Node#browserifyCompatible",
          "directUrl": "https://raw.githubusercontent.com/frozeman/WebSocket-Node/browserifyCompatible/package.json"
        }
      },
      "C:\\Users\\goe eun park\\Desktop\\2018-cap1-29\\ethereum\\node_modules\\web3-providers-ws"
    ]
  ],
  "_from": "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
  "_id": "websocket@1.0.26",
  "_inCache": true,
  "_location": "/websocket",
  "_phantomChildren": {},
  "_requested": {
    "raw": "websocket@git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
    "scope": null,
    "escapedName": "websocket",
    "name": "websocket",
    "rawSpec": "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
    "spec": "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:frozeman/WebSocket-Node.git#browserifyCompatible",
      "sshUrl": "git+ssh://git@github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
      "httpsUrl": "git+https://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
      "gitUrl": "git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
      "shortcut": "github:frozeman/WebSocket-Node#browserifyCompatible",
      "directUrl": "https://raw.githubusercontent.com/frozeman/WebSocket-Node/browserifyCompatible/package.json"
    }
  },
  "_requiredBy": [
    "/web3-providers-ws"
  ],
  "_resolved": "git://github.com/frozeman/WebSocket-Node.git#6c72925e3f8aaaea8dc8450f97627e85263999f2",
  "_shasum": "6039691885aca7ba66b453490d2c9ca51440afc1",
  "_shrinkwrap": null,
  "_spec": "websocket@git://github.com/frozeman/WebSocket-Node.git#browserifyCompatible",
  "_where": "C:\\Users\\goe eun park\\Desktop\\2018-cap1-29\\ethereum\\node_modules\\web3-providers-ws",
  "author": {
    "name": "Brian McKelvey",
    "email": "brian@worlize.com",
    "url": "https://www.worlize.com/"
  },
  "browser": "lib/browser.js",
  "bugs": {
    "url": "https://github.com/theturtle32/WebSocket-Node/issues"
  },
  "config": {
    "verbose": false
  },
  "contributors": [
    {
      "name": "Iñaki Baz Castillo",
      "email": "ibc@aliax.net",
      "url": "http://dev.sipdoc.net"
    }
  ],
  "dependencies": {
    "debug": "^2.2.0",
    "nan": "^2.3.3",
    "typedarray-to-buffer": "^3.1.2",
    "yaeti": "^0.0.6"
  },
  "description": "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",
  "devDependencies": {
    "buffer-equal": "^1.0.0",
    "faucet": "^0.0.1",
    "gulp": "git+https://github.com/gulpjs/gulp.git#4.0",
    "gulp-jshint": "^2.0.4",
    "jshint": "^2.0.0",
    "jshint-stylish": "^2.2.1",
    "tape": "^4.0.1"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "6c72925e3f8aaaea8dc8450f97627e85263999f2",
  "homepage": "https://github.com/theturtle32/WebSocket-Node",
  "keywords": [
    "websocket",
    "websockets",
    "socket",
    "networking",
    "comet",
    "push",
    "RFC-6455",
    "realtime",
    "server",
    "client"
  ],
  "license": "Apache-2.0",
  "main": "index",
  "name": "websocket",
  "optionalDependencies": {},
  "readme": "WebSocket Client & Server Implementation for Node\r\n=================================================\r\n\r\n[![npm version](https://badge.fury.io/js/websocket.svg)](http://badge.fury.io/js/websocket)\r\n\r\n[![NPM Downloads](https://img.shields.io/npm/dm/websocket.svg)](https://www.npmjs.com/package/websocket)\r\n\r\n[![NPM](https://nodei.co/npm/websocket.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/websocket/)\r\n\r\n[![NPM](https://nodei.co/npm-dl/websocket.png?height=3)](https://nodei.co/npm/websocket/)\r\n\r\n[ ![Codeship Status for theturtle32/WebSocket-Node](https://codeship.com/projects/70458270-8ee7-0132-7756-0a0cf4fe8e66/status?branch=master)](https://codeship.com/projects/61106)\r\n\r\nOverview\r\n--------\r\nThis is a (mostly) pure JavaScript implementation of the WebSocket protocol versions 8 and 13 for Node.  There are some example client and server applications that implement various interoperability testing protocols in the \"test/scripts\" folder.\r\n\r\nFor a WebSocket client written in ActionScript 3, see my [AS3WebScocket](https://github.com/theturtle32/AS3WebSocket) project.\r\n\r\n\r\nDocumentation\r\n=============\r\n\r\n[You can read the full API documentation in the docs folder.](docs/index.md)\r\n\r\n\r\nChangelog\r\n---------\r\n\r\n***Current Version: 1.0.26*** — Released 2018-04-27\r\n\r\n* No longer using the deprecated `noAssert` parameter for functions reading and writing binary numeric data. (Thanks, [@BridgeAR](https://github.com/BridgeAR))\r\n\r\n[View the full changelog](CHANGELOG.md)\r\n\r\nBrowser Support\r\n---------------\r\n\r\nAll current browsers are fully supported.\r\n\r\n* Firefox 7-9 (Old) (Protocol Version 8)\r\n* Firefox 10+ (Protocol Version 13)\r\n* Chrome 14,15 (Old) (Protocol Version 8)\r\n* Chrome 16+ (Protocol Version 13)\r\n* Internet Explorer 10+ (Protocol Version 13)\r\n* Safari 6+ (Protocol Version 13)\r\n\r\n***Safari older than 6.0 is not supported since it uses a very old draft of WebSockets***\r\n\r\n***If you need to simultaneously support legacy browser versions that had implemented draft-75/draft-76/draft-00, take a look here: https://gist.github.com/1428579***\r\n\r\nBenchmarks\r\n----------\r\nThere are some basic benchmarking sections in the Autobahn test suite.  I've put up a [benchmark page](http://theturtle32.github.com/WebSocket-Node/benchmarks/) that shows the results from the Autobahn tests run against AutobahnServer 0.4.10, WebSocket-Node 1.0.2, WebSocket-Node 1.0.4, and ws 0.3.4.\r\n\r\nAutobahn Tests\r\n--------------\r\nThe very complete [Autobahn Test Suite](http://autobahn.ws/testsuite/) is used by most WebSocket implementations to test spec compliance and interoperability.\r\n\r\n- [View Server Test Results](http://theturtle32.github.com/WebSocket-Node/test-report/servers/)\r\n\r\nInstallation\r\n------------\r\n\r\nA few users have reported difficulties building the native extensions without first manually installing node-gyp.  If you have trouble building the native extensions, make sure you've got a C++ compiler, and have done `npm install -g node-gyp` first. \r\n\r\nNative extensions are optional, however, and WebSocket-Node will work even if the extensions cannot be compiled.\r\n\r\nIn your project root:\r\n\r\n    $ npm install websocket\r\n  \r\nThen in your code:\r\n\r\n```javascript\r\nvar WebSocketServer = require('websocket').server;\r\nvar WebSocketClient = require('websocket').client;\r\nvar WebSocketFrame  = require('websocket').frame;\r\nvar WebSocketRouter = require('websocket').router;\r\nvar W3CWebSocket = require('websocket').w3cwebsocket;\r\n```\r\n\r\nNote for Windows Users\r\n----------------------\r\nBecause there is a small C++ component used for validating UTF-8 data, you will need to install a few other software packages in addition to Node to be able to build this module:\r\n\r\n- [Microsoft Visual C++](http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express)\r\n- [Python 2.7](http://www.python.org/download/) (NOT Python 3.x)\r\n\r\n\r\nCurrent Features:\r\n-----------------\r\n- Licensed under the Apache License, Version 2.0\r\n- Protocol version \"8\" and \"13\" (Draft-08 through the final RFC) framing and handshake\r\n- Can handle/aggregate received fragmented messages\r\n- Can fragment outgoing messages\r\n- Router to mount multiple applications to various path and protocol combinations\r\n- TLS supported for outbound connections via WebSocketClient\r\n- TLS supported for server connections (use https.createServer instead of http.createServer)\r\n  - Thanks to [pors](https://github.com/pors) for confirming this!\r\n- Cookie setting and parsing\r\n- Tunable settings\r\n  - Max Receivable Frame Size\r\n  - Max Aggregate ReceivedMessage Size\r\n  - Whether to fragment outgoing messages\r\n  - Fragmentation chunk size for outgoing messages\r\n  - Whether to automatically send ping frames for the purposes of keepalive\r\n  - Keep-alive ping interval\r\n  - Whether or not to automatically assemble received fragments (allows application to handle individual fragments directly)\r\n  - How long to wait after sending a close frame for acknowledgment before closing the socket.\r\n- [W3C WebSocket API](http://www.w3.org/TR/websockets/) for applications running on both Node and browsers (via the `W3CWebSocket` class). \r\n\r\n\r\nKnown Issues/Missing Features:\r\n------------------------------\r\n- No API for user-provided protocol extensions.\r\n\r\n\r\nUsage Examples\r\n==============\r\n\r\nServer Example\r\n--------------\r\n\r\nHere's a short example showing a server that echos back anything sent to it, whether utf-8 or binary.\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar WebSocketServer = require('websocket').server;\r\nvar http = require('http');\r\n\r\nvar server = http.createServer(function(request, response) {\r\n    console.log((new Date()) + ' Received request for ' + request.url);\r\n    response.writeHead(404);\r\n    response.end();\r\n});\r\nserver.listen(8080, function() {\r\n    console.log((new Date()) + ' Server is listening on port 8080');\r\n});\r\n\r\nwsServer = new WebSocketServer({\r\n    httpServer: server,\r\n    // You should not use autoAcceptConnections for production\r\n    // applications, as it defeats all standard cross-origin protection\r\n    // facilities built into the protocol and the browser.  You should\r\n    // *always* verify the connection's origin and decide whether or not\r\n    // to accept it.\r\n    autoAcceptConnections: false\r\n});\r\n\r\nfunction originIsAllowed(origin) {\r\n  // put logic here to detect whether the specified origin is allowed.\r\n  return true;\r\n}\r\n\r\nwsServer.on('request', function(request) {\r\n    if (!originIsAllowed(request.origin)) {\r\n      // Make sure we only accept requests from an allowed origin\r\n      request.reject();\r\n      console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');\r\n      return;\r\n    }\r\n    \r\n    var connection = request.accept('echo-protocol', request.origin);\r\n    console.log((new Date()) + ' Connection accepted.');\r\n    connection.on('message', function(message) {\r\n        if (message.type === 'utf8') {\r\n            console.log('Received Message: ' + message.utf8Data);\r\n            connection.sendUTF(message.utf8Data);\r\n        }\r\n        else if (message.type === 'binary') {\r\n            console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');\r\n            connection.sendBytes(message.binaryData);\r\n        }\r\n    });\r\n    connection.on('close', function(reasonCode, description) {\r\n        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');\r\n    });\r\n});\r\n```\r\n\r\nClient Example\r\n--------------\r\n\r\nThis is a simple example client that will print out any utf-8 messages it receives on the console, and periodically sends a random number.\r\n\r\n*This code demonstrates a client in Node.js, not in the browser*\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar WebSocketClient = require('websocket').client;\r\n\r\nvar client = new WebSocketClient();\r\n\r\nclient.on('connectFailed', function(error) {\r\n    console.log('Connect Error: ' + error.toString());\r\n});\r\n\r\nclient.on('connect', function(connection) {\r\n    console.log('WebSocket Client Connected');\r\n    connection.on('error', function(error) {\r\n        console.log(\"Connection Error: \" + error.toString());\r\n    });\r\n    connection.on('close', function() {\r\n        console.log('echo-protocol Connection Closed');\r\n    });\r\n    connection.on('message', function(message) {\r\n        if (message.type === 'utf8') {\r\n            console.log(\"Received: '\" + message.utf8Data + \"'\");\r\n        }\r\n    });\r\n    \r\n    function sendNumber() {\r\n        if (connection.connected) {\r\n            var number = Math.round(Math.random() * 0xFFFFFF);\r\n            connection.sendUTF(number.toString());\r\n            setTimeout(sendNumber, 1000);\r\n        }\r\n    }\r\n    sendNumber();\r\n});\r\n\r\nclient.connect('ws://localhost:8080/', 'echo-protocol');\r\n```\r\n\r\nClient Example using the *W3C WebSocket API*\r\n--------------------------------------------\r\n\r\nSame example as above but using the [W3C WebSocket API](http://www.w3.org/TR/websockets/).\r\n\r\n```javascript\r\nvar W3CWebSocket = require('websocket').w3cwebsocket;\r\n\r\nvar client = new W3CWebSocket('ws://localhost:8080/', 'echo-protocol');\r\n\r\nclient.onerror = function() {\r\n    console.log('Connection Error');\r\n};\r\n\r\nclient.onopen = function() {\r\n    console.log('WebSocket Client Connected');\r\n\r\n    function sendNumber() {\r\n        if (client.readyState === client.OPEN) {\r\n            var number = Math.round(Math.random() * 0xFFFFFF);\r\n            client.send(number.toString());\r\n            setTimeout(sendNumber, 1000);\r\n        }\r\n    }\r\n    sendNumber();\r\n};\r\n\r\nclient.onclose = function() {\r\n    console.log('echo-protocol Client Closed');\r\n};\r\n\r\nclient.onmessage = function(e) {\r\n    if (typeof e.data === 'string') {\r\n        console.log(\"Received: '\" + e.data + \"'\");\r\n    }\r\n};\r\n```\r\n    \r\nRequest Router Example\r\n----------------------\r\n\r\nFor an example of using the request router, see `libwebsockets-test-server.js` in the `test` folder.\r\n\r\n\r\nResources\r\n---------\r\n\r\nA presentation on the state of the WebSockets protocol that I gave on July 23, 2011 at the LA Hacker News meetup.  [WebSockets: The Real-Time Web, Delivered](http://www.scribd.com/doc/60898569/WebSockets-The-Real-Time-Web-Delivered)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/theturtle32/WebSocket-Node.git"
  },
  "scripts": {
    "gulp": "gulp",
    "install": "(node-gyp rebuild 2> builderror.log) || (exit 0)",
    "test": "faucet test/unit"
  },
  "version": "1.0.26"
}
